(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{209:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),i=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=i.a.createContext({}),s=function(e){var t=i.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},f=i.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,a=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(r),f=n,m=u["".concat(a,".").concat(f)]||u[f]||d[f]||o;return r?i.a.createElement(m,l(l({ref:t},c),{},{components:r})):i.a.createElement(m,l({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,a[1]=l;for(var c=2;c<o;c++)a[c]=r[c];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},88:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return l})),r.d(t,"toc",(function(){return p})),r.d(t,"default",(function(){return s}));var n=r(3),i=r(7),o=(r(0),r(209)),a={id:"pipeline_importer",title:"Importer",sidebar_label:"Importer"},l={unversionedId:"pipeline_importer",id:"version-1.2.6/pipeline_importer",isDocsHomePage:!1,title:"Importer",description:"Importer",source:"@site/versioned_docs/version-1.2.6/pipeline_importer.md",slug:"/pipeline_importer",permalink:"/netsage-pipeline/docs/1.2.6/pipeline_importer",editUrl:"https://github.com/netsage-project/netsage-pipeline/edit/master/website/versioned_docs/version-1.2.6/pipeline_importer.md",version:"1.2.6",sidebar_label:"Importer",sidebar:"version-1.2.6/Pipeline",previous:{title:"Pipeline",permalink:"/netsage-pipeline/docs/1.2.6/pipeline"},next:{title:"Pipeline Logstash",permalink:"/netsage-pipeline/docs/1.2.6/pipeline_logstash"}},p=[{value:"Importer",id:"importer",children:[]},{value:"Importer",id:"importer-1",children:[{value:"Configuration",id:"configuration",children:[]},{value:"Internals",id:"internals",children:[]}]}],c={toc:p};function s(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"importer"},"Importer"),Object(o.b)("p",null,"A netsage-netflow-importer-daemon reads any new nfcapd files that have come in after a configurable delay. The importer aggregates flows within each file, and writes the results to the netsage_deidentifier_raw queue rabbit queue."),Object(o.b)("h2",{id:"importer-1"},"Importer"),Object(o.b)("p",null,"NOTE: Importer will be deprecated in the future and replace with a logstash operation."),Object(o.b)("h3",{id:"configuration"},"Configuration"),Object(o.b)("p",null,"configuration files for the importer are ",Object(o.b)("inlineCode",{parentName:"p"},"netsage_netflow_importer.xml")," and ",Object(o.b)("inlineCode",{parentName:"p"},"netsage_shared.xml")," in ",Object(o.b)("inlineCode",{parentName:"p"},"/etc/grnoc/netsage/deidentifer/"),". Comments in the files briefly describe the options."),Object(o.b)("p",null,"Names of files have already been read are stored in /var/cache/netsage/netflow_importer.cache. "),Object(o.b)("h3",{id:"internals"},"Internals"),Object(o.b)("p",null,"The importer uses the nfdump command with -a to aggregate within the file, and -L ",Object(o.b)("inlineCode",{parentName:"p"},"threshold")," to throw out any flows under a flow size threshold. "),Object(o.b)("p",null,"For cenic, data from the importer first goes into a ...prefilter queue. A netsage-flow-filter-daemon reads it out, removes some flows , then sends it to the ...raw queue.\nA ...raw2 or ...fake queue is created for historical reasons but never actually holds any messages."),Object(o.b)("p",null,"All flow data waits in the netsage_deidentifier_raw queue until it is processed by the logstash pipeline as follows."))}s.isMDXComponent=!0}}]);