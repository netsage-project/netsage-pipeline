# Various preliminaries

filter {

    # 1. Check for missing fields that can cause logstash to crash
    if ![meta][src_ip] {
        mutate{
            id => "10-01"
            add_tag => [ "src_ip was missing in flow header!?" ]
            add_field => { "[meta][src_ip]" => "0.0.0.0" }
        }
    }
    if ![meta][dst_ip] {
        mutate{
            id => "10-02"
            add_tag => [ "dst_ip was missing in flow header!?" ]
            add_field => { "[meta][dst_ip]" => "0.0.0.0" }
        }
    }
    if ![meta][src_ifindex] {
        mutate{
            id => "10-03"
            add_tag => [ "src_ifindex was missing in flow header!?" ]
            add_field => { "[meta][src_ifindex]" => -10 }
        }
    }
    if ![meta][dst_ifindex] {
        mutate{
            id => "10-04"
            add_tag => [ "dst_ifindex was missing in flow header!?" ]
            add_field => { "[meta][dst_ifindex]"  => -10 }
        }
    }
    if ![values][duration] {
        mutate{
            id => "10-05"
            add_tag => [ "duration was missing!?" ]
            add_field => { "[values][duration]" => 0 }
        }
    }

    # 2. Drop flows to or from private addresses (or other ranges we want to drop)
    cidr {
        id => "10-1"
        address => [ "%{[meta][src_ip]}" ]
        network => [ "10.0.0.0/8", "100.64.0.0/10", "192.168.0.0/16", "172.16.0.0/12", "fc00::/7", "169.254.0.0/16", "fe80::/10", "::1/128" ]
        add_field => { "@private_src" => "yes" }
    }
    # can skip dst if src is private
    if ![@private_src] {
        cidr {
            id => "10-2"
            address => [ "%{[meta][dst_ip]}" ]
            network => [ "10.0.0.0/8", "100.64.0.0/10", "192.168.0.0/16", "172.16.0.0/12", "fc00::/7", "169.254.0.0/16", "fe80::/10", "::1/128" ]
            add_field => { "@private_dst" => "yes" }
        }
    }
    # drop
    if [@private_src] == "yes" or [@private_dst] == "yes" {
        drop { id => "10-3" }
    }

    # 3. Add @ingest_time field (useful for debugging)
    mutate {
      id => "10-4"
      add_field => { '@ingest_time' =>  "%{@timestamp}" }
    }
    date {
      id => "10-5"
      match => [ "@ingest_time", "ISO8601" ]
      target => "@ingest_time"
    }

    # 4. Convert strings to numeric types where appropriate. We need to use these in calculations later.
    # Start and end are timestamps at this point. Make sure they are floats.
    mutate {
      id => "10-6"
      convert => {
        'start'                        => 'float'
        'end'                          => 'float'
        '[values][duration]'           => 'float'
        '[values][num_bits]'           => 'integer'
        '[values][num_packets]'        => 'integer'
        '[values][bits_per_second]'    => 'float'
        '[values][packets_per_second]' => 'float'
      }
    }

    ruby {
      id => "10-7"
      code => "
        flow_ts = event.get('start').to_f
        flow_te = event.get('end').to_f

    # 5. Convert any timestamps in ms to s
        if flow_ts > 9999999999.0
            flow_ts = flow_ts / 1000.0
            event.set('start', flow_ts)
        end
        if flow_te > 9999999999.0 
            flow_te = flow_te / 1000.0
            event.set('end', flow_te)
        end

    # 6. DROP any event with a strange start or end time
    #    > 10 sec in the future or > 1 year in the past, or end < start
        current_t = Time.now.to_f 
        age_s = current_t - flow_ts
        age_e = current_t - flow_te
        if age_s < -10.0 || age_s > 31536000.0 || age_e < -10.0 || age_e > 31536000.0 || flow_te < flow_ts
	    event.cancel
        end
      "
      tag_on_exception => '_rubyexception in 10-preliminaries'
    }

}
