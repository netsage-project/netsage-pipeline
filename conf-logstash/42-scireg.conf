
# general approach used here:
#   mmdb record gets parsed into [meta][scireg][src] (or [dst])
#      this fills in [meta][scireg][src][latitude] and [meta][scireg][src][city_name]
#   JSON in [meta][scireg][src][city_name] gets parsed into [meta][scireg][src_json]
#   fields in [meta][scireg][src_json] (discipline, resource name and project name) are copied to final locations

filter {

  # Tag SOURCE with Science Registry info - get info from fake geoip db holding scireg data
    geoip {
        id => "42-1"
        database => "/var/lib/grnoc/netsage/newScireg.mmdb"
        default_database_type => "City"
        cache_size => 1000
        source => "[meta][src_ip]"
        target => "[meta][scireg][src]"
        tag_on_failure => []
    }
  # break up the json in city_name into indiv fields (target gets totally overwritten with the info from the json)
    json {
        id => "42-2"
        source => "[meta][scireg][src][city_name]"
        target => "[meta][scireg][src_json]"
        tag_on_failure => ["_jsonparsefailure of city_name"]
    }


  # Tag DESTINATION with Science Registry info - get info from fake geoip db holding scireg data
  #     Skip if it's Multicast!
    if [meta][dst_organization] != "Multicast" {
        geoip {
            id => "42-3"
            database => "/var/lib/grnoc/netsage/scireg-new.mmdb"
            default_database_type => "City"
            cache_size => 1000
            source => "[meta][dst_ip]"
            target => "[meta][scireg][dst]"
            tag_on_failure => []
        }
        json {
            id => "42-4"
            source => "[meta][scireg][dst][city_name]"
            target => "[meta][scireg][dst_json]"
            tag_on_failure => ["_jsonparsefailure of city_name"]
        }
    } 


    # if lat/long set in Science Registry, use those
    if [meta][scireg][src][latitude]  {
          mutate {
              id => "42-7"
              copy => {
                  "[meta][scireg][src][latitude]"  => "[meta][src_location][lat]"
                  "[meta][scireg][src][longitude]" => "[meta][src_location][lon]"
                  "[meta][scireg][src_json][org_name]"  => "[meta][src_organization]"
                  "[meta][scireg][src_json][resource]"  => "[meta][src_resource_name]" 
                  "[meta][scireg][src_json][project]"  => "[meta][scireg][src][project_names]" 
                  "[meta][scireg][src_json][discipline]"  => "[meta][scireg][src][discipline]" 
              }
              add_field => { "[meta][src_location][data_source]" => "scireg" }
          }

    }
    if [meta][scireg][dst][latitude]   {
          mutate {
              id => "42-8"
              copy => { 
                   "[meta][scireg][dst][latitude]"  => "[meta][dst_location][lat]" 
                   "[meta][scireg][dst][longitude]" => "[meta][dst_location][lon]" 
                   "[meta][scireg][dst_json][org_name]"  => "[meta][dst_organization]" 
                   "[meta][scireg][dst_json][resource]"  => "[meta][dst_resource_name]" 
                   "[meta][scireg][dst_json][project]"  => "[meta][scireg][dst][project_names]" 
                   "[meta][scireg][dst_json][discipline]"  => "[meta][scireg][dst][discipline]" 
              }
              add_field => { "[meta][dst_location][data_source]" => "scireg" }
          }
    }


  # Remove unneeded fields
  # note: after SciReg cleanup, be sure to edit this!! XXX
  # check in elastic for unneeded stuff...
    mutate {
        id => "42-10"
        remove_field => "[meta][scireg][src][location]"
        remove_field => "[meta][scireg][dst][location]"
        remove_field => "[meta][scireg][src][org_abbr]"
        remove_field => "[meta][scireg][dst][org_abbr]"
        remove_field => "[meta][scireg][src][org_name]"
        remove_field => "[meta][scireg][dst][org_name]"
        remove_field => "[meta][scireg][src][resource]"
        remove_field => "[meta][scireg][dst][resource]"
        remove_field => "[meta][scireg][src][resource_abbr]"
        remove_field => "[meta][scireg][dst][resource_abbr]"
        remove_field => "[meta][scireg][src][city_name]"
        remove_field => "[meta][scireg][dst][city_name]"
        remove_field => "[meta][scireg][src][ip]"
        remove_field => "[meta][scireg][dst][ip]"
        remove_field => "[meta][scireg][src][latitude]"
        remove_field => "[meta][scireg][src][longitude]"
        remove_field => "[meta][scireg][dst][latitude]"
        remove_field => "[meta][scireg][dst][longitude]"
        # MUST remove projects, otherwise elastic throws the data away!
        remove_field => "[meta][scireg][src][projects]"  
        remove_field => "[meta][scireg][dst][projects]"
        remove_field => "[meta][scireg][src_json]"
        remove_field => "[meta][scireg][dst_json]"
    }

}

# for debuging
#output {
# Log everything to file
#  file {
#      path => "/data/output/42-scireg.log"
#      codec => json_lines
#      # overwrite everytime (file will only contain last entry)
#      write_behavior => "overwrite"
#      #write_behavior => "append"
#    }
#  if [scireg_data] {
#    # log more specific stuff (easier to see what is happening)
#    file {
#      path => "/data/output/mmdb_lookup.log"
#      codec => line {
#        format => "src_ip: %{saved_src_ip}, scireg_data: %{scireg_data}, scireg_city_name: %{scireg_city_name}, scireg_resource_name: %{scireg_resource_name} discipline: %{discipline}"
#      }
#      # overwrite everytime (file will only contain last entry)
#      write_behavior => "overwrite"
#      #write_behavior => "append"
#    }
#  }
#
# for more (actually way too much) debug info, uncomment these
#  stdout {
#    codec => rubydebug
#  }
#
#  if [ruby_debug] {
#    stdout {
#      codec => line {
#        format => "src_ip: %{saved_src_ip}, scireg_data: %{scireg_data}, scireg_city_name: %{scireg_city_name}, scireg_resource_name: %{scireg_resource_name} discipline: %{discipline}"
#      }
#    }
#  }
#}
