# Translate pmacct fields to those the rest of the pipeline uses
       # NOTE: pmacct (nfacctd and sfacctd) must be run with
       # pretag files wherein 'label' must be set to 'sfacct--' or 'nfacct--'
       # followed by the sensor name with spaces replaced by #s.

filter {

    # For sflow -
    if [label] =~ /^sfacct--/ {
        mutate {
            add_field => { "[meta][flow_type]" => "sflow" }
            # (Assuming some aggregation over time by sfacctd)
            rename => {'timestamp_min' => 'start'}
            rename => {'timestamp_max' => 'end'}
            id => "05-1"
        }
    }

    # For netflow -
    if [label] =~ /^nfacct--/ {
        # On startup, before a template is sent and read, sampling_rate will be 0 and no corrections applied; drop these! 
        # COMMENT OUT IF THERE REALLY IS NO SAMPLING AT THE ROUTER!
        if [sampling_rate] == 0 {
            drop { id => "05-0" }
        }
        mutate {
            add_field => { "[meta][flow_type]" => "netflow" }
            # (Assuming no aggregation over time by nfacctd)
            rename => {'timestamp_start' => 'start'}
            rename => {'timestamp_end'   => 'end'}
            id => "05-2"
        }
    }

   # For all flows from pmacct processes -
   # Get sensor name
   # Note: In the pmacct pretag file, label must be set to sfacct-- or nfacct--
   # followed by the real sensor name with spaces replaced by #s.
    ruby {
        code => '
            sensor = event.get("label")
            sensor = sensor.gsub("sfacct--", "")
            sensor = sensor.gsub("nfacct--", "")
            sensor = sensor.gsub("#", " ")
            event.set( "[meta][sensor_id]", sensor )
        '
        tag_on_exception => '_rubyexception getting sensor from label in 05-translate-pmacct. '
        id => "05-3"
    }
    # Do field name translations
    mutate {
        rename => {'ip_src'    => '[meta][src_ip]'}
        rename => {'ip_dst'    => '[meta][dst_ip]'}
        rename => {'port_src'  => '[meta][src_port]'}
        rename => {'port_dst'  => '[meta][dst_port]'}
        rename => {'ip_proto'  => '[meta][protocol]'}
        rename => {'iface_in'  => '[meta][src_ifindex]'}
        rename => {'iface_out' => '[meta][dst_ifindex]'}
        rename => {'as_src'    => '[meta][src_asn]'}
        rename => {'as_dst'    => '[meta][dst_asn]'}
        rename => {'packets'   => '[values][num_packets]'}
        convert => {'start' => 'float'}
        convert => {'end'   => 'float'}
        id => "05-4"
    }
    ruby {
        code => '
            event.set( "[values][num_bits]", event.get("bytes") * 8 )
            event.set( "[values][duration]", event.get("end") - event.get("start") )
            if event.get("[values][duration]") <= 0.001    ## == 0 to within roundoff error
                event.set( "[values][bits_per_second]",    0 )
                event.set( "[values][packets_per_second]", 0 )
            else
                bps = event.get("[values][num_bits]")    / event.get("[values][duration]")
                pps = event.get("[values][num_packets]") / event.get("[values][duration]")
                event.set( "[values][bits_per_second]" ,   bps.to_i )
                event.set( "[values][packets_per_second]", pps.to_i )
            end
        '
        tag_on_exception => '_rubyexception in 05-translate-pmacct. '
        id => "05-5"
    }
    # Remove unneeded fields
    mutate {
        remove_field => [ 'sampling_rate', 'event_type', 'writer_id' ]
        remove_field => [ 'label',         'bytes' ]
        id => "05-6"
    }

}
