filter {

# Deidentify IP addresses
    # Use grok to confirm validity of source and destination IP addresses.
        # eg, in [meta][*_ip] => find IPV4 pattern : if found, put the result in field *_ipv4.
        # (@metadata fields are not included in event output, so don't have to delete them)
    # For IPV4 addresses,
        # Get the first 3 octets of the IP and save to field *_ip_clipped
        # Update the orig *_ip, adding .x to the end of the clipped version
        # then remove the clipped field  (when matching like this, you can't save to a nested field, so need this)
    # For IPV6 addresses,
        # In anonymize_ipv6.rb script, expand to full format with 8 hextets, then replace the last 4 with x:x:x:x.

# source ip's
    grok {
        id => "70-1"
        match => { "[meta][src_ip]" => "^%{IPV4:[@metadata][src_ipv4]}$" }
        match => { "[meta][src_ip]" => "^%{IPV6:[@metadata][src_ipv6]}$" }
    }

    if [@metadata][src_ipv4] {
        grok {
            id => "70-2"
            match => { "[meta][src_ip]" => "(?<src_ip_clipped>(\d{1,3}\.){3})\d{1,3}" }
        }
        mutate {
            id => "70-3"
            update => { "[meta][src_ip]" => "%{src_ip_clipped}x" }
            remove_field => [ "src_ip_clipped", "[@metadata][src_ipv4]" ]
        }
    } else if [@metadata][src_ipv6] {
        ruby {
            id => "70-4"
            path => "/etc/logstash/conf.d/ruby/anonymize_ipv6.rb"            
            script_params => { "ip_field" => "[meta][src_ip]" }
            tag_on_exception => '_rubyexception in anonymize_ipv6.rb'
        }
    } else {
        # 2 mutates are needed to get operations to happen in the right order
        mutate { add_field => { "[PRIVATE][src_ip]" => "invalid ip: %{[meta][src_ip]}" } }
        mutate { update => { "[meta][src_ip]" => "INVALID IP" } }
    }

# destination ip's
    grok {
        id => "70-5"
        match => { "[meta][dst_ip]" => "^%{IPV4:[@metadata][dst_ipv4]}$" }
        match => { "[meta][dst_ip]" => "^%{IPV6:[@metadata][dst_ipv6]}$" }
    }

    if [@metadata][dst_ipv4] {
        grok {
            id => "70-6"
            match => { "[meta][dst_ip]" => "(?<dst_ip_clipped>(\d{1,3}\.){3})\d{1,3}" }
        }
        mutate {
            id => "70-7"
            update => { "[meta][dst_ip]" => "%{dst_ip_clipped}x" }
            remove_field => [ "dst_ip_clipped" ]
        }
    } else if [@metadata][dst_ipv6] {
        ruby {
            id => "70-8"
            path => "/etc/logstash/conf.d/ruby/anonymize_ipv6.rb"      
            script_params => { "ip_field" => "[meta][dst_ip]" }
            tag_on_exception => '_rubyexception in anonymize_ipv6.rb'
        }
    } else {
        mutate { add_field => { "[PRIVATE][dst_ip]" => "invalid ip: %{[meta][dst_ip]}" } }
        mutate { update => { "[meta][dst_ip]" => "INVALID IP" } }
    }

}
