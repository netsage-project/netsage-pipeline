
# This file is a simplified version of 42-scireg.conf, except that it uses the communites.mmdb
# communities.mmdb contains a list of sites for various regional networks, but uses the scireg format 
#  so that certian tools can be shared for both use cases
# However, it assumes resource, discipline, project are all null, so not handled here
# Note that if the subnet is in both the communities file and the SciReg file, the SciReg file info
#  will overwrite the communities file info. Be sure to set the 'community' field in the Science Registry 
#  correctly.

filter {

  # Tag SOURCE with communities info 
    geoip {
        id => "42-1"
        database => "/var/lib/netsage/communities.mmdb"
        default_database_type => "City"
        cache_size => 1000
        source => "[meta][src_ip]"
        target => "[meta][scireg][src]"
        tag_on_failure => ["_communities_lookup_failure_src_ip"]
    }
   # Check if the lookup was successful by verifying the presence of a field
    if [meta][scireg][src][city_name] {
       mutate {
           add_field => { "[meta][src][data_source]" => "communities" }
           # helpful for debugging
           add_tag => ["_communities_lookup_success_src_ip"]
       }
    }
  # break up the json in city_name into indiv fields (target gets totally overwritten with the info from the json)
    json {
        id => "42-2"
        source => "[meta][scireg][src][city_name]"
        target => "[meta][scireg][src_json]"
        tag_on_failure => ["_jsonparsefailure of city_name"]
    }


  # Tag DESTINATION with communities info 
  #     Skip if it's Multicast!
    if [meta][dst_organization] != "Multicast" {
        geoip {
            id => "42-3"
            database => "/var/lib/netsage/communities.mmdb"
            default_database_type => "City"
            cache_size => 1000
            source => "[meta][dst_ip]"
            target => "[meta][scireg][dst]"
            tag_on_failure => ["_communities_lookup_failure_dst_ip"]
        }
        # Check if the lookup was successful by verifying the presence of a field
         if [meta][scireg][dst][city_name] {
            mutate {
                add_field => { "[meta][dst][data_source]" => "communities" }
                add_tag => ["_communities_lookup_success_dst_ip"]
            }
         }
  # break up the json in city_name into indiv fields (target gets totally overwritten with the info from the json)
        json {
            id => "42-4"
            source => "[meta][scireg][dst][city_name]"
            target => "[meta][scireg][dst_json]"
            tag_on_failure => ["_jsonparsefailure of city_name"]
        }
    } 

    # also check if non zero
    if [meta][scireg][src][latitude] and !([meta][scireg][src][latitude] in [0, "0", 0.0, "0.0"])  {
          mutate {
              id => "42-7"
              copy => {
                  "[meta][scireg][src][latitude]"  => "[meta][src_location][lat]"
                  "[meta][scireg][src][longitude]" => "[meta][src_location][lon]"
                  "[meta][scireg][src_json][org_name]"  => "[meta][src_organization]"
                  "[meta][scireg][src_json][resource]"  => "[meta][src_resource_name]" 
              }
          }
    }
    mutate {
         copy => { "[meta][scireg][src_json][community]" => "[meta][scireg][src][community]" }
    }

    if [meta][scireg][dst][latitude] and !([meta][scireg][dst][latitude] in [0, "0", 0.0, "0.0"])  {
          mutate {
              id => "42-8"
              copy => { 
                  "[meta][scireg][dst][latitude]"  => "[meta][dst_location][lat]" 
                  "[meta][scireg][dst][longitude]" => "[meta][dst_location][lon]" 
                  "[meta][scireg][dst_json][org_name]"  => "[meta][dst_organization]" 
              }
          }
    }

    mutate {
         copy => { "[meta][scireg][dst_json][community]" => "[meta][scireg][dst][community]" }
    }

    # if not in communties file, set to none
    # not needed?? 
    #if ![meta][dst_location][data_source] {
    #      mutate {
    #          add_field => { "[meta][dst_location][data_source]" => "none" }
    #      }
    #}


  # Remove unneeded fields
    mutate {
        id => "42-10"
        remove_field => "[meta][scireg][src][location]"
        remove_field => "[meta][scireg][dst][location]"
        remove_field => "[meta][scireg][src][ip]"
        remove_field => "[meta][scireg][dst][ip]"
        remove_field => "[meta][scireg][src][latitude]"
        remove_field => "[meta][scireg][src][longitude]"
        remove_field => "[meta][scireg][dst][latitude]"
        remove_field => "[meta][scireg][dst][longitude]"
        # comment these out for debugging 
        remove_field => "[meta][scireg][src][city_name]"
        remove_field => "[meta][scireg][dst][city_name]"
        remove_field => "[meta][scireg][src_json]"
        remove_field => "[meta][scireg][dst_json]"
    }
}

