# Make changes required for specific sensors
# ${variable-name:default-value} are obtained from an environment file (the .env file for Docker installations; for bare-metal installations, 
# the default is /etc/logstash/logstash-env-vars - see the logstash systemd file) 
# If values are not provided (eg, there is no env file), the defaults following the :'s are used. (Flags will be False, so nothing will happen).
# With a bare-metal installation, you may also just edit this file and fill in the values you want.

# Using env vars in conditionals has been an open issue for logstash since 2016! Workaround is to add a field.

filter {

      # IFINDEX FILTERING
      #---- Drop flows that do not have src or dst ifindex in a specified list of ifindexes
      # Specifying a sensor name is optional. If not given, the ifindex list will apply to all sensors.
      # Example settings in env file:   ifindex_filter_keep="500; Sensor 1: 123,456; Sensor 2 : 789, 123"  
      #        (If specified, the sensor name must be exact, otherwise spaces don't matter. Separate lists with semicolons.) 

      mutate {
            add_field => { "[@metadata][ifindex_filter_flag]" => "${ifindex_filter_flag:False}" }
      }
      if [@metadata][ifindex_filter_flag] != "False" {
            mutate {
                  add_field => { "[@metadata][ifindex_filter_list]" => "${ifindex_filter_list:123,456}" }
                  id => "15-1"
            }
            mutate {
                  # Split the string on ';' into an array
                  split     => { "[@metadata][ifindex_filter_list]" => ";" }
                  add_field => { "[@metadata][ifindex_filter_list]" => "dummy" }
                  id => "15-2"
            }
            ruby {
                  code => '
                        action = "keep"  # Default: keep everything
                        mode = event.get("[@metadata][ifindex_filter_flag]")
                        filters = event.get("[@metadata][ifindex_filter_list]")
                        filters.each do |f|
                              next if f == "dummy"  # Process only relevant sensor
                              if (! f.include? ":") or (f =~ /#{event.get("[meta][sensor_id]")}\s*:/)
                                    f.sub!(/.*:/, "")
                                    f.gsub!(/\s/, "")
                                    indexes = f.split(",")
                                    src_match = indexes.include? event.get("[meta][src_ifindex]").to_s
                                    dst_match = indexes.include? event.get("[meta][dst_ifindex]").to_s
                                    if mode == "Include"
                                          action = "drop" unless src_match or dst_match  # Keep only specified
                                    elsif mode == "Exclude"
                                          action = "drop" if src_match or dst_match  # Drop only specified
                                    end
                              end
                        end
                        event.cancel if action == "drop"
                  '
            }
      }


      # SENSOR NAME CHANGE BY IFINDEX
      #---- Change the sensor name for flows from a certain interface (ifindex) 
      mutate {
          add_field => { "[@metadata][ifindex_sensor_rename_flag]"     => "${ifindex_sensor_rename_flag:False}" }
          id => "15-3"
      }
      if [@metadata][ifindex_sensor_rename_flag] == "True" {
          mutate {
              add_field => { "[@metadata][ifindex_sensor_rename_old_name]" => "${ifindex_sensor_rename_old_name:oldname}" }
              add_field => { "[@metadata][ifindex_sensor_rename_new_name]" => "${ifindex_sensor_rename_new_name:newname}" }
              add_field => { "[@metadata][ifindex_sensor_rename_ifindex]"  => "${ifindex_sensor_rename_ifindex:1}" }
              id => "15-4"
          }
          if [meta][sensor_id] == [@metadata][ifindex_sensor_rename_old_name]
          and ( [meta][src_ifindex] == [@metadata][ifindex_sensor_rename_ifindex] or [meta][dst_ifindex] == [@metadata][ifindex_sensor_rename_ifindex] ) {
              mutate {
                  replace => { "[meta][sensor_id]" => "%{[@metadata][ifindex_sensor_rename_new_name]}" }
                  id => "15-5"
              }
          }
      }


      # SAMPLING RATE CORRECTIONS
      #---- Manually apply a sampling correction to listed sensors. Use only in special cases when the flow exporter or collector is providing corrections.
      # For netflow, a sampling rate correction can be done here or in the nfsen config or nfcapd command using the -s option.
      # For sflow, there is no such option, so it must be done here. 

      mutate {
         add_field => { "[@metadata][sampling_correction_flag]"    => "${sampling_correction_flag:False}" }
         id => "15-6"
      }
      if [@metadata][sampling_correction_flag] == "True" {
          mutate {
             add_field => { "[@metadata][sampling_correction_sensors]" => "${sampling_correction_sensors:sensor1,sensor2}" }
             add_field => { "[@metadata][sampling_correction_factor]"  => "${sampling_correction_factor:1}" }
             id => "15-7"
          }
          mutate {
	     # make the field into an array  (see comments about split above)
             split =>     { "[@metadata][sampling_correction_sensors]" => "," }           
             add_field => { "[@metadata][sampling_correction_sensors]" => "dummy" }
             id => "15-8"
          }
          if [meta][sensor_id] in [@metadata][sampling_correction_sensors] {
             ruby {
                 code => "
                      correction_factor = event.get('[@metadata][sampling_correction_factor]').to_i
                      event.set('[values][num_bits]',      correction_factor * event.get('[values][num_bits]').to_i)
                      event.set('[values][num_packets]',   correction_factor * event.get('[values][num_packets]').to_i)
                      event.set('[values][bits_per_second]',    correction_factor * event.get('[values][bits_per_second]').to_i)
                      event.set('[values][packets_per_second]', correction_factor * event.get('[values][packets_per_second]').to_i)
                 "
                 id => "15-9"
             }
          }
      }

      # SUBNET FILTERING
      #---- For named sensors, drop all flows except those that have src or dst IP in a specified list of subnets.
      #     But keep all flows if a sensor is not referenced at all in the list (by name or ALL)!
      # Example setting in env file:   subnet_filter_keep="ALL: 123.45.6.0/24; Sensor 1: 98.765.43.0/24, 100.222.33.0/24"
      #     "ALL:" or a sensor name must be specified before each subnet list. If specified, the sensor name must be exact.
      #     Separate subnets with commas and lists with semicolons.

      mutate {
            add_field => { "[@metadata][subnet_filter_flag]" => "${subnet_filter_flag:False}" }
            id => "15-12"
      }
      if [@metadata][subnet_filter_flag] != "False" {
            mutate {
                  add_field => { "[@metadata][subnet_filter_list]" => "${subnet_filter_list:Some-Sensor:134.456.78.0/24}" }
                  id => "15-13"
            }
            mutate {
                  # Split the string on ';' into an array
                  split     => { "[@metadata][subnet_filter_list]" => ";" }
                  add_field => { "[@metadata][subnet_filter_list]" => "dummy" }
                  id => "15-14"
            }
            ruby {
                  id => "15-15"
                  tag_on_exception => "_rubyexception C in 15-sensor-specific-changes. "
                  code => '
                        require "ipaddr"
                        action = "keep"  # Default: keep everything
                        mode = event.get("[@metadata][subnet_filter_flag]")
                        flow_sensor = event.get("[meta][sensor_id]")
                        flow_src = event.get("[meta][src_ip]")
                        flow_dst = event.get("[meta][dst_ip]")
                        filters = event.get("[@metadata][subnet_filter_list]").map! { |e| e.strip } 
                        filters.each do |f|
                              next if f == "dummy"  # Check if this filter applies to the current sensor or all
                              if (f.include? "ALL:") or (f =~ /^#{flow_sensor}\s*:/)
                                    f.sub!(/#{flow_sensor}\s*:/, "")
                                    f.sub!(/ALL\s*:/, "")
                                    f.gsub!(/\s/, "")
                                    subnets = f.split(",")
                                    src_match = false
                                    dst_match = false
                                    subnets.each do |net|
                                          netobj = IPAddr.new(net)
                                          src_match = true if netobj.include? flow_src
                                          dst_match = true if netobj.include? flow_dst
                                    end
                                    if mode == "Include"
                                          action = "drop" unless src_match or dst_match  # Keep only specified
                                    elsif mode == "Exclude"
                                          action = "drop" if src_match or dst_match  # Drop only specified
                                    end
                              end  # end if this filter list applies
                        end
                        event.cancel if action == "drop"
                  '
            }
      }


}
