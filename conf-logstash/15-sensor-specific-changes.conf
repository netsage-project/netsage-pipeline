# Make changes required for specific sensors
# ${variable-name:default-value} are obtained from an environment file (the .env file for Docker installations; for bare-metal installations, 
# the default is /etc/logstash/logstash-env-vars - see the logstash systemd file) 
# If values are not provided (eg, there is no env file), the defaults following the :'s are used. (Flags will be False, so nothing will happen).
# With a bare-metal installation, you may also just edit this file and fill in the values you want.

# Using env vars in conditionals has been an open issue for logstash since 2016! Workaround is to add a field.

filter {

            # IFINDEX FILTERING
            #---- Drop flows that do not have src or dst ifindex in a specified list of ifindexes
            # Specifying a sensor name is optional. If not given, the ifindex list will apply to all sensors.
            # Example settings in env file:   ifindex_filter_list="500; Sensor 1: 123,456; Sensor 2 : 789, 123"

            mutate {
                  add_field => { "[@metadata][ifindex_filter_flag]" => "${ifindex_filter_flag:False}" }
                  id => "15-1"
            }

            if [@metadata][ifindex_filter_flag] != "False" {
                  mutate {
                        add_field => { "[@metadata][ifindex_filter_list]" => "${ifindex_filter_list:123,456}" }
                        id => "15-2"
                  }

                  ruby {
                        id => "15-3"
                        tag_on_exception => "_rubyexception_C_in_15-sensor-specific-ifindex-filter"
                        code => '
                              mode = event.get("[@metadata][ifindex_filter_flag]")
                              flow_sensor = event.get("[meta][sensor_id]")
                              src_ifindex = event.get("[meta][src_ifindex]")
                              dst_ifindex = event.get("[meta][dst_ifindex]")

                              if flow_sensor.nil? || src_ifindex.nil? || dst_ifindex.nil?
                                    event.tag("_missing_ifindex_field")
                                    return
                              end

                              raw_filters = event.get("[@metadata][ifindex_filter_list]")

                              if raw_filters.nil?
                                    event.tag("_ifindex_filter_list_missing")
                                    return
                              end

                              filters = raw_filters.split(";").map(&:strip)

                              matched = false
                              filter_applied = false

                              filters.each do |f|
                                    next if f.strip == "dummy"

                                    if !f.include?(":") || f.match(/^#{Regexp.escape(flow_sensor)}\s*:/)
                                          filter_applied = true

                                          f = f.sub(/^#{Regexp.escape(flow_sensor)}\s*:/, "")
                                          f.gsub!(/\s/, "")

                                          indexes = f.split(",")

                                          if indexes.include?(src_ifindex.to_s) || indexes.include?(dst_ifindex.to_s)
                                                matched = true
                                                break
                                          end
                                    end
                              end

                              if filter_applied
                                    if mode == "Include"
                                          unless matched
                                                event.cancel
                                          end
                                    elsif mode == "Exclude"
                                          if matched
                                                event.cancel
                                          end
                                    else
                                          event.tag("_invalid_ifindex_mode")
                                    end
                              end
                        '
                  }

            }

            # SENSOR NAME CHANGE BY IFINDEX
            #---- Change the sensor name for flows from a certain interface (ifindex)

            mutate {
                  add_field => { "[@metadata][ifindex_sensor_rename_flag]"     => "${ifindex_sensor_rename_flag:False}" }
                  id => "15-4"
            }

            if [@metadata][ifindex_sensor_rename_flag] == "True" {
                  mutate {
                        add_field => { "[@metadata][ifindex_sensor_rename_old_name]" => "${ifindex_sensor_rename_old_name:oldname}" }
                        add_field => { "[@metadata][ifindex_sensor_rename_new_name]" => "${ifindex_sensor_rename_new_name:newname}" }
                        add_field => { "[@metadata][ifindex_sensor_rename_ifindex]"  => "${ifindex_sensor_rename_ifindex:1}" }
                        id => "15-5"
                  }

                  if [meta][sensor_id] == [@metadata][ifindex_sensor_rename_old_name]
                  and ( [meta][src_ifindex] == [@metadata][ifindex_sensor_rename_ifindex] or [meta][dst_ifindex] == [@metadata][ifindex_sensor_rename_ifindex] ) {
                        mutate {
                              replace => { "[meta][sensor_id]" => "%{[@metadata][ifindex_sensor_rename_new_name]}" }
                              id => "15-6"
                        }
                  }
            }

            # SAMPLING RATE CORRECTIONS
            #---- Manually apply a sampling correction to listed sensors.

            mutate {
                  add_field => { "[@metadata][sampling_correction_flag]"    => "${sampling_correction_flag:False}" }
                  id => "15-7"
            }

            if [@metadata][sampling_correction_flag] == "True" {
                  mutate {
                        add_field => { "[@metadata][sampling_correction_sensors]" => "${sampling_correction_sensors:sensor1,sensor2}" }
                        add_field => { "[@metadata][sampling_correction_factor]"  => "${sampling_correction_factor:1}" }
                        id => "15-8"
                  }

                  mutate {
                        split =>     { "[@metadata][sampling_correction_sensors]" => "," }
                        add_field => { "[@metadata][sampling_correction_sensors]" => "dummy" }
                        id => "15-9"
                  }

                  if [meta][sensor_id] in [@metadata][sampling_correction_sensors] {
                        ruby {
                              id => "15-10"
                              code => "
                                    correction_factor = event.get('[@metadata][sampling_correction_factor]').to_i
                                    event.set('[values][num_bits]',      correction_factor * event.get('[values][num_bits]').to_i)
                                    event.set('[values][num_packets]',   correction_factor * event.get('[values][num_packets]').to_i)
                                    event.set('[values][bits_per_second]',    correction_factor * event.get('[values][bits_per_second]').to_i)
                                    event.set('[values][packets_per_second]', correction_factor * event.get('[values][packets_per_second]').to_i)
                              "
                        }
                  }
            }

            # SUBNET FILTERING
            #---- For named sensors, drop all flows except those that have src or dst IP in a specified list of subnets.

            mutate {
                  add_field => { "[@metadata][subnet_filter_flag]" => "${subnet_filter_flag:False}" }
                  id => "15-11"
            }

            if [@metadata][subnet_filter_flag] != "False" {
                  mutate {
                        add_field => { "[@metadata][subnet_filter_list]" => "${subnet_filter_list:Some-Sensor:134.456.78.0/24}" }
                        id => "15-12"
                  }

                  ruby {
                        id => "15-13"
                        tag_on_exception => "_rubyexception_C_in_15-sensor-specific-subnet-filter"
                        code => '
                              require "ipaddr"

                              mode = event.get("[@metadata][subnet_filter_flag]")
                              flow_sensor = event.get("[meta][sensor_id]")
                              flow_src = event.get("[meta][src_ip]")
                              flow_dst = event.get("[meta][dst_ip]")

                              if flow_sensor.nil? || flow_src.nil? || flow_dst.nil?
                                    event.tag("_missing_subnet_field")
                                    return
                              end

                              raw_filters = event.get("[@metadata][subnet_filter_list]")

                              if raw_filters.nil?
                                    event.tag("_subnet_filter_list_missing")
                                    return
                              end

                              filters = raw_filters.split(";").map(&:strip)

                              matched = false
                              filter_applied = false

                              begin
                                    src_ip_obj = IPAddr.new(flow_src)
                                    dst_ip_obj = IPAddr.new(flow_dst)
                              rescue => e
                                    event.tag("_ip_parse_failure")
                                    return
                              end

                              filters.each do |f|
                                    next if f.strip == "dummy"

                                    if f.include?("ALL:") || f.match(/^#{Regexp.escape(flow_sensor)}\s*:/)
                                          filter_applied = true

                                          f = f.sub(/^#{Regexp.escape(flow_sensor)}\s*:/, "")
                                          f = f.sub(/^ALL\s*:/, "")
                                          f.gsub!(/\s/, "")

                                          subnets = f.split(",")

                                          subnets.each do |net|
                                                begin
                                                      netobj = IPAddr.new(net)
                                                rescue
                                                      event.tag("_invalid_subnet")
                                                      next
                                                end

                                                if netobj.include?(src_ip_obj) || netobj.include?(dst_ip_obj)
                                                      matched = true
                                                      break
                                                end
                                          end

                                          break if matched
                                    end
                              end

                              if filter_applied
                                    if mode == "Include"
                                          unless matched
                                                event.cancel
                                          end
                                    elsif mode == "Exclude"
                                          if matched
                                                event.cancel
                                          end
                                    else
                                          event.tag("_invalid_subnet_mode")
                                    end
                              end
                        '
                  }
            }

}

