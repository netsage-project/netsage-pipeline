# Here we replace source and destination organization names from prior tagging with the names of
# "member organizations" which have been assigned certain IP blocks by a parent org.
# Member names and IP ranges should be in *-members-list.rb files, eg, ilight-members-list.rb.
# Lookups are done only for the ASNs listed in *-members-list.rb (as integer array).
# The first member netblock encountered that contains the IP is the one used to get the org name.

filter {

    ruby {
      id => "55-1"
      tag_on_exception => "_rubyexception in member_orgs"

# init is run only when logstash starts up. 
      init => "

          # Ruby gem we need
          require 'ipaddr'
      
          # Read ALL support/*-members-list.rb files here.
          # Code in these files set, eg, @asn_list['example-network'] = [asn1, asn2]
          # and @members['example-network'] = { ipblock1 => member1, ipblock2 => members}
          @asn_list = {}
          @members = {}
          p 'reading member-org lists:'
          Dir.glob('/etc/logstash/conf.d/support/*-members-list.rb').each do |f| 
              p f     # print filename
              eval(IO.read(f), binding)
          end
      "
      
# code is run for each event
      code => "
      
    #==== Source ====
          src_members = {}
          found = false
 
      # PREFILTER BY ASN - find which ONE member-org list to use, based on the ASN
      # (comment out next 7 lines if not using prefiltering)
         src_asn = event.get('[meta][src_asn]').to_i  # make sure this is an integer (and @asn_list values are integers)
         @asn_list.each do |network, asns|
             if asns.include?(src_asn)
                src_members = @members[network]
                break
             end
         end
   
      # TO SKIP PREFILTERING - loop over ALL member lists 
      # (uncomment 1 line here + 'break' and 'end' lines below) 
      ##@members.each do |network, src_members|        # FOR NO PREFILTERING
   
          # find the member netblock containing the IP and reset meta.organization
          if !src_members.empty?
              begin
              ip_obj = IPAddr.new( event.get('[meta][src_ip]') )
      
              src_members.each do |block, entity|
                  block_obj = IPAddr.new( block )
                  if block_obj.include?(ip_obj)
                      found = true
                      event.set('[meta][src_organization]', entity)      
                      break
                  end
              end
              rescue Exception => e
                  event.tag('_rubyexception in member_orgs - src - ' + e.message)
              end
          end

    ##    break if found      # FOR NO PREFILTERING
    ##end                     # FOR NO PREFILTERING
 

    #==== Destination ====
          dst_members = {}
          found = false
 
      # PREFILTER BY ASN - find which ONE member-org list to use, based on the ASN
      # (comment out next 7 lines if not using prefiltering)
         dst_asn = event.get('[meta][dst_asn]').to_i   # make sure this is a number and @asn_list values are numbers
         @asn_list.each do |network, asns|
             if asns.include?(dst_asn)
                dst_members = @members[network]
                break
             end
         end
   
      # TO SKIP PREFILTERING - loop over ALL member lists 
      # (uncomment 1 line here + 'break' and 'end' lines below) 
      ##@members.each do |network, dst_members|
   
          # find the member netblock containing the IP and reset meta.organization
          if !dst_members.empty?
              begin
              ip_obj = IPAddr.new( event.get('[meta][dst_ip]') )
      
              dst_members.each do |block, entity|
                  block_obj = IPAddr.new( block )
                  if block_obj.include?(ip_obj)
                      found = true
                      event.set('[meta][dst_organization]', entity)      
                      break
                  end
              end
              rescue Exception => e
                  event.tag('_rubyexception in member_orgs - dst - ' + e.message)
              end
          end

    ##    break if found      # FOR NO PREFILTERING
    ##end                     # FOR NO PREFILTERING

      "
    }

}
