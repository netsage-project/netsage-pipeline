
# This file is a greatly simplified version of 42-scireg.conf, except that it uses the communites.mmdb
# communities.mmdb contains a list of sites for various regional networks

filter {

  # Tag SOURCE with communities info 
    geoip {
        id => "42-1"
        database => "/var/lib/netsage/communities.mmdb"
        default_database_type => "City"
        cache_size => 1000
        source => "[meta][src_ip]"
        target => "[meta][community][src]"
        tag_on_failure => ["_communities_lookup_failure_src_ip"]
    }
    # break up the json in city_name into indiv fields (target gets totally overwritten with the info from the json)
    json {
        id => "42-2"
        source => "[meta][community][src][city_name]"
        target => "[meta][community][src_json]"
        tag_on_failure => ["_jsonparsefailure of city_name"]
    }

   # Check if the lookup was successful by verifying the presence of a field
    if [meta][community][src][city_name] {
       mutate {
           add_field => { "[meta][src][data_source]" => "communities" }
           copy => { 
              "[meta][community][src_json][community]" => "[meta][src][community]" 
              "[meta][community][src_json][org_name]"  => "[meta][src_organization]"
           }
           # helpful for debugging
           add_tag => ["_communities_lookup_success_src_ip"]
       }
    }


  # Tag DESTINATION with communities info 
  #     Skip if it's Multicast!
    if [meta][dst_organization] != "Multicast" {
        geoip {
            id => "42-3"
            database => "/var/lib/netsage/communities.mmdb"
            default_database_type => "City"
            cache_size => 1000
            source => "[meta][dst_ip]"
            target => "[meta][community][dst]"
            tag_on_failure => ["_communities_lookup_failure_dst_ip"]
        }
  # break up the json in city_name into indiv fields (target gets totally overwritten with the info from the json)
        json {
            id => "42-4"
            source => "[meta][community][dst][city_name]"
            target => "[meta][community][dst_json]"
            tag_on_failure => ["_jsonparsefailure of city_name"]
        }
        # Check if the lookup was successful by verifying the presence of a field
         if [meta][community][dst][city_name] {
            mutate {
                add_field => { "[meta][dst][data_source]" => "communities" }
                copy => { 
                  "[meta][community][dst_json][community]" => "[meta][dst][community]" 
                  "[meta][community][dst_json][org_name]"  => "[meta][dst_organization]"
                }
                add_tag => ["_communities_lookup_success_dst_ip"]
            }
         }
    } 

   # if not set from the communties file, set community to none
    if ![meta][src][community] {
          mutate {
              add_field => { "[meta][src][community]" => "none" }
          }
    }
    if ![meta][dst][community] {
          mutate {
              add_field => { "[meta][dst][community]" => "none" }
          }
    }

  # Remove unneeded fields
    mutate {
        id => "42-10"
        # comment these out for debugging 
        remove_field => "[meta][community][src][city_name]"
        remove_field => "[meta][community][dst][city_name]"
        remove_field => "[meta][community][src_json]"
        remove_field => "[meta][community][dst_json]"
        remove_field => "[meta][community]"
    }
}

