
# general approach used here:
#   mmdb record gets parsed into [meta][scireg][src] (or [dst])
#      this fills in [meta][scireg][src][latitude] and [meta][scireg][src][city_name]
#   JSON in [meta][scireg][src][city_name] gets parsed into [meta][scireg][src_json]
#   fields in [meta][scireg][src_json] (discipline, resource name and project name) are copied to final locations

filter {

  # Tag SOURCE with Science Registry info - get info from fake geoip db holding scireg data
    geoip {
        id => "43-1"
        database => "/var/lib/netsage/scireg.mmdb"
        default_database_type => "City"
        cache_size => 1000
        source => "[meta][src_ip]"
        target => "[meta][scireg][src]"
        tag_on_failure => ["_scireg_lookup_failure_src_ip"]
    }
  # break up the json in city_name into indiv fields (target gets totally overwritten with the info from the json)
    json {
        id => "43-2"
        source => "[meta][scireg][src][city_name]"
        target => "[meta][scireg][src_json]"
        tag_on_failure => ["_jsonparsefailure of city_name"]
    }

    # Check if the lookup was successful by verifying the presence of a field
    if [meta][scireg][src][city_name] {
       mutate {
          add_field => { "[meta][src][data_source]" => "scireg" }
          # always copy org_name 
          copy => {
             "[meta][scireg][src_json][org_name]"  => "[meta][src_organization]"
          }
       }
       # use org_name as resource_name if resource is blank
       if ![meta][scireg][src_json][resource] or [meta][scireg][src_json][resource] == "" {
           mutate {
               copy => {
                   "[meta][src_organization]" => "[meta][src_resource_name]"
               }
           }
       } else {
           mutate {
               copy => {
                   "[meta][scireg][src_json][resource]" => "[meta][src_resource_name]"
               }
           }
       }
    }

  # Tag DESTINATION with Science Registry info - get info from fake geoip db holding scireg data
  #     Skip if it's Multicast!
    if [meta][dst_organization] != "Multicast" {
        geoip {
            id => "43-3"
            database => "/var/lib/netsage/scireg.mmdb"
            default_database_type => "City"
            cache_size => 1000
            source => "[meta][dst_ip]"
            target => "[meta][scireg][dst]"
            tag_on_failure => ["_scireg_lookup_failure_dst_ip"]
        }
        json {
            id => "43-4"
            source => "[meta][scireg][dst][city_name]"
            target => "[meta][scireg][dst_json]"
            tag_on_failure => ["_jsonparsefailure of city_name"]
        }

        if [meta][scireg][dst][city_name] {
            mutate {
               add_field => { "[meta][dst][data_source]" => "scireg" }
               # always copy org_name 
               copy => {
                  "[meta][scireg][dst_json][org_name]"  => "[meta][dst_organization]"
               }
            }
            # use org_name as resource_name if resource is blank
            if ![meta][scireg][dst_json][resource] or [meta][scireg][dst_json][resource] == "" {
                  mutate {
                      copy => {
                          "[meta][dst_organization]" => "[meta][dst_resource_name]"
                      }
                  }
            } else {
                  mutate {
                      copy => {
                          "[meta][scireg][dst_json][resource]" => "[meta][dst_resource_name]"
                      }
                  }
            }
       }
    } 

    # also check if latitude is non zero
    if [meta][scireg][src][latitude] and !([meta][scireg][src][latitude] in [0, "0", 0.0, "0.0"])  {
          mutate {
              id => "43-7"
              copy => {
                  "[meta][scireg][src][latitude]"  => "[meta][src_location][lat]"
                  "[meta][scireg][src][longitude]" => "[meta][src_location][lon]"
              }
              add_field => { "[meta][src_location][data_source]" => "scireg" }
          }
    }
    # all scireg should have org_name and resource, but discipline and project are optional
    #   so only copy if not null
    if [meta][scireg][src_json][discipline] != "" {
         # copy to legacy field [scireg][src][discipline] too. Note: must use separate mutate for that
         mutate {
             copy => { "[meta][scireg][src_json][discipline]" => "[meta][src_discipline]" }
         }
         mutate {
             copy => { "[meta][scireg][src_json][discipline]" => "[meta][scireg][src][discipline]" }
         }
    }

    if [meta][scireg][src_json][project] != "" {
         mutate {
             copy => { "[meta][scireg][src_json][project]"  => "[meta][src_project_names]" }
         }
         mutate {
             copy => { "[meta][scireg][src_json][project]"  => "[meta][scireg][src][project_names]" }
         }
    }

    # if this field is in the science registry, copy it over too
    # NOTE: now only get community from community file, not SciReg!
    #if [meta][scireg][src_json][community] {
    #    if !([meta][src][community]) {
    #        mutate {
    #            add_field => { "[meta][src][community]" => "%{[meta][scireg][src_json][community]}" }
    #        }
    #    } else if [meta][src][community] == "None" {
    #        # overwrite if "None"
    #        mutate {
    #            replace => { "[meta][src][community]" => "%{[meta][scireg][src_json][community]}" }
    #        }
    #    }
    #}

    if [meta][scireg][dst][latitude] and !([meta][scireg][dst][latitude] in [0, "0", 0.0, "0.0"])  {
          mutate {
              id => "43-8"
              copy => { 
                  "[meta][scireg][dst][latitude]"  => "[meta][dst_location][lat]" 
                  "[meta][scireg][dst][longitude]" => "[meta][dst_location][lon]" 
                  "[meta][scireg][dst_json][org_name]"  => "[meta][dst_organization]" 
                  "[meta][scireg][dst_json][resource]"  => "[meta][dst_resource_name]" 
              }
              add_field => { "[meta][dst_location][data_source]" => "scireg" }
          }
    }
    if [meta][scireg][dst_json][discipline] != "" {
         mutate {
              copy => { "[meta][scireg][dst_json][discipline]" => "[meta][dst_discipline]" }
         }
         mutate {
              copy => { "[meta][scireg][dst_json][discipline]" => "[meta][scireg][dst][discipline]" }
         }
    }

    if [meta][scireg][dst_json][project] != "" {
         mutate {
             copy => { "[meta][scireg][dst_json][project]"  => "[meta][dst_project_names]" }
         }
         mutate {
             copy => { "[meta][scireg][dst_json][project]"  => "[meta][scireg][dst][project_names]" }
         }
    }
    # if this field is in the science registry, copy it over too
    #if [meta][scireg][dst_json][community] {
    #    if !([meta][dst][community]) {
    #        mutate {
    #            add_field => { "[meta][dst][community]" => "%{[meta][scireg][dst_json][community]}" }
    #        }
    #    } else if [meta][dst][community] == "None" {
    #        # overwrite if "None"
    #        mutate {
    #            replace => { "[meta][dst][community]" => "%{[meta][scireg][dst_json][community]}" }
    #        }
    #    }
    #}

  # Remove unneeded fields
    mutate {
        id => "43-10"
        remove_field => "[meta][scireg][src][location]"
        remove_field => "[meta][scireg][dst][location]"
        remove_field => "[meta][scireg][src][ip]"
        remove_field => "[meta][scireg][dst][ip]"
        remove_field => "[meta][scireg][src][latitude]"
        remove_field => "[meta][scireg][src][longitude]"
        remove_field => "[meta][scireg][dst][latitude]"
        remove_field => "[meta][scireg][dst][longitude]"
        remove_field => "[meta][scireg][src][community]"
        remove_field => "[meta][scireg][dst][community]"
        # comment these out for debugging 
        remove_field => "[meta][scireg][src][city_name]"
        remove_field => "[meta][scireg][dst][city_name]"
        remove_field => "[meta][scireg][src_json]"
        remove_field => "[meta][scireg][dst_json]"
    }
}

