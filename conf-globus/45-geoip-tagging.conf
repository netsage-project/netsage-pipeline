# Tag the flow with location information (lat, lon, country, continent) from the MaxMind City database.
# If unavailable, leave lat, lon unset, and set country and continent to Unknown.

# Note: Most cloud providers do not have Country/Lat/Long in the MaxMind DB. The DB only contains "registered_country_name"
#    which is not supported by Logstash. But its probably better to use Unknown than the wrong location, in case the cloud
#    provider is international
#
# Uncomment the output section at the end for debugging
#

filter {

   # First, see if the DESTINATION is in the multicast range (224.0.0.0 through 239.255.255.255).
   # If yes, set dst_continent, dst_country, and dst_organization to "Multicast", set dst_asn to -1, and don't set destination lat/long. 
    cidr {
        id => "45-1"
        address => [ "%{[meta][dst_ip]}" ]
        network => [ "224.0.0.0/4", "ff00::/8" ]
        add_field => { "@multicast_dst" => "yes" }
    }

    if [@multicast_dst] == "yes" {
        mutate {
            id => "45-2"
            add_field => {"[meta][dst_continent]" => "Multicast"}
            add_field => {"[meta][dst_country_name]" => "Multicast"}
            add_field => {"[meta][dst_organization]" => "Multicast"}
            replace   => {"[meta][dst_asn]" => -1}
            }
    }

    #===== SOURCE 
    geoip {
        id => "45-3"
        database => "/var/lib/grnoc/netsage/GeoLite2-City.mmdb"
        default_database_type => "City"
        cache_size => 1000  # 1000 is the default. Increase if seems slow
        source => "[meta][src_ip]"
        # NOTE: location will fail for some IPs (eg: cloud providers)
        fields => [ "continent_name", "country_name", "location"]
        target => "[src_geoip]"
        tag_on_failure => ["_geoip_lookup_failure: src_ip"]

    }

    if !("_geoip_lookup_failure - src IP not in CITY db" in [tags]) {
        mutate {
            id => "45-4"
            copy => {
                "[src_geoip][continent_name]" => "[meta][src_continent]"
                "[src_geoip][country_name]"   => "[meta][src_country_name]"
            }
        }
    }
    # if src_location not already filled in by Science Registry, copy it over
    #
    if ![meta][src_location] {
        mutate {
           copy => { "[src_geoip][location]"  => "[meta][src_location]" }
           add_field => { "[meta][src_location][data_source]" => "maxmind" }
        }
    }

    #===== DESTINATION   (if not multicast)
    if !([@multicast_dst] == "yes") {
        geoip {
            id => "45-5"
            database => "/var/lib/grnoc/netsage/GeoLite2-City.mmdb"
            default_database_type => "City"
            cache_size => 1000
            source => "[meta][dst_ip]"
            fields => [ "continent_name", "country_name", "location"]
            target => "[dst_geoip]"
            tag_on_failure => ["_geoip_lookup_failure: dst_ip"]
        }

        if !("_geoip_lookup_failure - dst IP not in CITY db" in [tags]) {
            mutate {
                id => "45-6"
                copy => {
                    "[dst_geoip][continent_name]" => "[meta][dst_continent]"
                    "[dst_geoip][country_name]"   => "[meta][dst_country_name]"
                }
            }
        }
    } 

    # Make sure lat/lon are floats
    mutate {
        id => "45-7"
        convert => {
            '[meta][src_location][lat]' => "float"
            '[meta][src_location][lon]' => "float"
            '[meta][dst_location][lat]' => "float"
            '[meta][dst_location][lon]' => "float"
        }
    }

    # In case the IP was not found in the db or the db was missing a piece of information, set missing fields to Unknown
    if ![meta][src_country_name] {
        mutate {
            add_tag => ["error"]
            replace => { "[meta][src_country_name]" => "Unknown" }
            replace => { "[meta][src_continent]" => "Unknown" }
            replace => { "error_message" => "GeoIP lookup failed for src IP: %{[meta][src_ip]}, using database /var/lib/grnoc/netsage/GeoLite2-City.mmdb" }
        }
    }
    if ![meta][dst_country_name] {
        mutate {
            add_tag => ["error"]
            replace => { "[meta][dst_country_name]" => "Unknown" }
            replace => { "[meta][dst_continent]" => "Unknown" }
            replace => { "error_message" => "GeoIP lookup failed for dst IP: %{[meta][dst_ip]}, using database /var/lib/grnoc/netsage/GeoLite2-City.mmdb" }
        }
    }

    mutate { 
        id => "45-8"
        remove_field =>  "[src_geoip]" 
        remove_field =>  "[dst_geoip]" 
        remove_field =>  "[@multicast_dst]" 
    }
}


# for debugging 
#output {
## Log failed GeoIP lookups
#  if "error" in [tags] {
#    file {
#      path => "/data/output_data/geoip_error.log"
#      codec => line { format => "%{+YYYY-MM-dd HH:mm:ss} %{error_message}" }
#    }
#  }
#  #for more detailed debugging, uncomment this section
#  file {
#      path => "/data/output_data/geoip_lookup.log"
#      codec => line { format =>
#        '{ "%{+YYYY-MM-dd HH:mm:ss}" "src_ip":"%{[meta][src_ip]}", "src_continent":"%{[meta][src_continent]}", "src_country_name":"%{[meta][src_country_name]}", "src_location":"%{[meta][src_location]}", "dst_ip":"%{[meta][dst_ip]}", "dst_continent":"%{[meta][dst_continent]}", "dst_country_name":"%{[meta][dst_country_name]}", "dst_location":"%{[meta][dst_location]}" }' }
#    }
#
#   # to send final result to docker logs
#    stdout {
#     codec => rubydebug {}
#   }
#}

