#!/usr/bin/env python3

# convert the set of CSV file generated by mysql2csv.py to a single JSON file.

# this program was used once to migrate from mySQL, and is not currently needed by the pipeline

ip_block_data_file = 'ip_block.csv'
organization_data_file = 'organization.csv'
project_data_file = 'project.csv'
ip_block_project_data_file = 'ip_block_project.csv'
output_file = 'results.json'

import csv
import json

def read_csv_file(file_path):
    data = []
    with open(file_path, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            data.append(row)
    return data

def generate_json_objects(ip_block_data, organization_data, project_data, ip_block_project_data):
    json_objects = []
    for ip_block_row in ip_block_data:
        json_object = {}
        
        # Populate IP block details
        json_object["addresses"] = [ip_block_row["addr_str"]]
        json_object["addresses_str"] = ip_block_row["addr_str"]
        json_object["asn"] = ip_block_row["asn"]
        json_object["country_code"] = ip_block_row["country_code"]
        json_object["description"] = ip_block_row["description"]
        json_object["discipline"] = ip_block_row["discipline_id"]
        json_object["discipline_description"] = ip_block_row["role_id"]
        json_object["ip_block_id"] = ip_block_row["ip_block_id"]
        json_object["latitude"] = ip_block_row["latitude"]
        json_object["longitude"] = ip_block_row["longitude"]
        
        # Find corresponding organization details
        organization_id = ip_block_row["organization_id"]
        organization_row = next((org for org in organization_data if org["organization_id"] == organization_id), None)
        if organization_row:
            json_object["org_abbr"] = organization_row["abbr"]
            json_object["org_country_code"] = organization_row["country_code"]
            json_object["org_description"] = organization_row["description"]
            json_object["org_latitude"] = organization_row["latitude"]
            json_object["org_longitude"] = organization_row["longitude"]
            json_object["org_name"] = organization_row["name"]
            json_object["org_url"] = organization_row["url"]
        
        # Find corresponding project IDs
        ip_block_id = ip_block_row["ip_block_id"]
        project_ids = [row["project_id"] for row in ip_block_project_data if row["ip_block_id"] == ip_block_id]
        
        # Find corresponding projects
        projects = []
        for project_id in project_ids:
            project_row = next((proj for proj in project_data if proj["project_id"] == project_id), None)
            if project_row:
                project = {
                    "project_abbr": project_row["abbr"],
                    "project_contact": project_row["owner"],
                    "project_description": project_row["description"],
                    "project_email": project_row["email"],
                    "project_name": project_row["name"],
                    "project_url": project_row["url"]
                }
                projects.append(project)
        json_object["projects"] = projects
        
        # Add the JSON object to the array
        json_objects.append(json_object)
    
    return json_objects

# Read IP block data from CSV
ip_block_data = read_csv_file(ip_block_data_file)

# Read organization data from CSV
organization_data = read_csv_file(organization_data_file)

# Read project data from CSV
project_data = read_csv_file(project_data_file)

# Read IP block project data from CSV
ip_block_project_data = read_csv_file(ip_block_project_data_file)

# Generate JSON objects
json_objects = generate_json_objects(ip_block_data, organization_data, project_data, ip_block_project_data )

# Print the resulting JSON objects
#for json_object in json_objects:
#    print(json.dumps(json_object, indent=4))

print ("Saving results to file: ", output_file)

# Write JSON objects to a file
with open(output_file, 'w') as jsonfile:
    json.dump(json_objects, jsonfile, indent=4)

